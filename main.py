import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.dispatcher.filters import Text
from random import randint
from aiogram.types import Sticker
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.utils.emoji import emojize
import asyncio

#from flask import Flask, request
import requests

def skl(x) :
    f1 = lambda a: (a%100)//10 != 1 and a%10 == 1
    f2 = lambda a: (a%100)//10 != 1 and a%10 in [2,3,4]
    return " –≥—Ä–∞–¥—É—Å" if f1(x) else  " –≥—Ä–∞–¥—É—Å–∞" if f2(x) else " –≥—Ä–∞–¥—É—Å–æ–≤"


def get_weather():
    params = {"access_key": "03f637409974d3bd297d1d269e4a87f8", "query": "Moscow"}
    api_result = requests.get('http://api.weatherstack.com/current', params)
    api_response = api_result.json()
    grad = api_response['current']['temperature']
    send  = "–°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ " + str(grad) + skl(abs(grad))
    return send

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="1760292725:AAEp-FM34YAt8zMM59pnv73NeWvZm2kwAuE")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ü—Ä–∏–≤–µ—Ç –ë–æ—Ç", "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", "–ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã" , "–ö–∞–∫–∞—è c–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞?"]
    keyboard.add(*buttons)
    await message.answer("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–ü—Ä–∏–≤–µ—Ç –ë–æ—Ç")
async def hello(message: types.Message):
    await message.answer(emojize("–ü—Ä–∏–≤–µ—Ç –ê–Ω—è!"))
    await message.answer(emojize(":wave:"))


@dp.message_handler(lambda message: message.text == "–ö–∞–∫–∞—è c–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞?")
async def weather(message: types.Message):
    await message.answer(get_weather())

@dp.message_handler(lambda message: message.text == "–ü–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã")
async def random_swit(message: types.Message):
    await message.answer("–•–º–º–º–º –¥–∞–π –ø–æ–¥—É–º–∞—Ç—å")
    await asyncio.sleep(0.5)

    click = randint(0,5)
    if click == 0:
        await message.answer_sticker(r'CAACAgIAAxkBAAEBBI9gV7gSuahfGjTGq86uvelzvNdsgAACGAADwDZPE9b6J7-cahj4HgQ')
    elif click == 1:
        await message.answer_sticker(r'CAACAgIAAxkBAAEBBJJgV7iExyEC8LCf1At8gZxf7Gf1DwACOwMAAm2wQgMDgo__5XFPdR4E')
    elif click == 2:
        await message.answer_sticker(r'CAACAgUAAxkBAAEBBJVgV7iVAdJZcKVNRAIDYEjVEkkolAAC4QYAAszG4gLDJmXp-6nvCR4E')
    elif click == 3:
        await message.answer_sticker(r'CAACAgIAAxkBAAEBBJhgV7n1qKndabTiJBYPZPaR69V40QACGwADrWW8FOEKYLlsBxzjHgQ')
    elif click == 4:
        await message.answer_sticker(r'CAACAgIAAxkBAAEBBJtgV7okHwGD9v1CEqSmSZCixRMX6gAC7wEAAladvQrc_Ul1tTRfQB4E')
    else:
        await message.answer_sticker(r'CAACAgIAAxkBAAEBBI9gV7gSuahfGjTGq86uvelzvNdsgAACGAADwDZPE9b6J7-cahj4HgQ')

    await asyncio.sleep(1)
    click = randint(0,2)
    if click == 0:
        await message.answer("–û–Ω–æ —Å–∏–¥–∏—Ç –Ω–∞ —Ç–µ–±–µ <b>–∏–¥–µ–∞–ª—å–Ω–æ</b> !" , parse_mode=types.ParseMode.HTML)
    else:
        await message.answer("–í–æ–æ–±—à–µ –Ω–µ –∏–¥–µ—Ç" , parse_mode=types.ParseMode.HTML)

#await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())



# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")

@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

executor.start_polling(dp, skip_updates=True)


